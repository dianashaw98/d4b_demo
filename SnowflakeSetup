-- When working with the Cortex Analyst REST API, the best approach is to use the service role for creating and managing the database, schema, and tables that will be used by the API.

CREATE ROLE IF NOT EXISTS CORTEX_SERVICE_ROLE;
GRANT ROLE CORTEX_SERVICE_ROLE TO USER D4B;

CREATE OR REPLACE WAREHOUSE SKICAR WAREHOUSE_SIZE = XSMALL
    AUTO_SUSPEND = 60
    AUTO_RESUME = TRUE
    INITIALLY_SUSPENDED = TRUE
    COMMENT = 'Warehouse for Cortex Analyst demo';
USE WAREHOUSE SKICAR;
GRANT USAGE ON WAREHOUSE SKICAR TO ROLE CORTEX_SERVICE_ROLE;

USE ROLE CORTEX_SERVICE_ROLE;
USE SCHEMA SKICAR.SKICAR_SCHEMA;
CREATE DATABASE IF NOT EXISTS SKICAR;
CREATE SCHEMA IF NOT EXISTS SKICAR_SCHEMA;
CREATE STAGE SETUP ENCRYPTION = (TYPE = 'SNOWFLAKE_SSE') DIRECTORY = ( ENABLE = TRUE );

CREATE TABLE STREAMING_ORDERS (
    ORDER_ID VARCHAR,
    PRODUCT_ID VARCHAR,
    ORDER_TIMESTAMP TIMESTAMP,
    ORDER_STATUS VARCHAR
);

INSERT INTO STREAMING_ORDERS VALUES
('ORD1001', 'SKU-123', '2023-06-10 09:15:00', 'SHIPPED'),
('ORD1002', 'SKU-456', '2023-07-11 11:30:00', 'DELIVERED'),
('ORD1003', 'SKU-789', '2023-08-15 14:00:00', 'IN_TRANSIT');

-- PRODUCT_INFO (analogous to VEHICLE_INFO)
CREATE TABLE PRODUCT_INFO (
    PRODUCT_ID VARCHAR,
    PRODUCT_NAME VARCHAR,
    PRODUCT_TYPE VARCHAR
);

INSERT INTO PRODUCT_INFO VALUES
('SKU-123', 'All-Season Tires', 'TIRE'),
('SKU-456', 'Performance Tires', 'TIRE'),
('SKU-789', 'Off-Road Tires', 'TIRE');

-- WARRANTY_RECORDS (analogous to MAINTENANCE_RECORDS)
CREATE TABLE WARRANTY_RECORDS (
    PRODUCT_ID VARCHAR,
    WARRANTY_START_DATE DATE,
    WARRANTY_END_DATE DATE
);

INSERT INTO WARRANTY_RECORDS VALUES
('SKU-123', '2023-01-01', '2024-01-01'),
('SKU-456', '2023-02-01', '2024-02-01'),
('SKU-789', '2023-03-01', '2024-03-01');

CREATE DYNAMIC TABLE ORDERS_SCD2
TARGET_LAG = 'DOWNSTREAM'
WAREHOUSE = SKICAR
REFRESH_MODE = INCREMENTAL
AS
SELECT 
    ORDER_ID,
    PRODUCT_ID,
    ORDER_TIMESTAMP,
    ORDER_STATUS
FROM STREAMING_ORDERS;

CREATE DYNAMIC TABLE ORDERS_MODELS_ENRICHED
TARGET_LAG = 'DOWNSTREAM'
WAREHOUSE = SKICAR
REFRESH_MODE = INCREMENTAL
AS
SELECT 
    O.ORDER_ID,
    O.PRODUCT_ID,
    O.ORDER_TIMESTAMP,
    O.ORDER_STATUS,
    CASE 
        WHEN O.ORDER_STATUS = 'DELIVERED' THEN 'COMPLETED'
        ELSE 'ACTIVE'
    END AS ORDER_LIFECYCLE_STAGE
FROM ORDERS_SCD2 O;

CREATE DYNAMIC TABLE LATEST_WARRANTY
TARGET_LAG = 'DOWNSTREAM'
WAREHOUSE = SKICAR
REFRESH_MODE = INCREMENTAL
AS
SELECT 
    PI.PRODUCT_ID,
    PI.PRODUCT_NAME,
    PI.PRODUCT_TYPE,
    WR.WARRANTY_START_DATE,
    WR.WARRANTY_END_DATE
FROM PRODUCT_INFO PI
JOIN WARRANTY_RECORDS WR
    ON PI.PRODUCT_ID = WR.PRODUCT_ID;

CREATE DYNAMIC TABLE SUPPLY_CHAIN2
TARGET_LAG = 'DOWNSTREAM'
WAREHOUSE = SKICAR
REFRESH_MODE = INCREMENTAL
AS
SELECT 
    OME.ORDER_ID,
    OME.PRODUCT_ID,
    OME.ORDER_TIMESTAMP,
    OME.ORDER_STATUS,
    OME.ORDER_LIFECYCLE_STAGE,
    LW.PRODUCT_NAME,
    LW.PRODUCT_TYPE,
    LW.WARRANTY_START_DATE,
    LW.WARRANTY_END_DATE
FROM ORDERS_MODELS_ENRICHED OME
JOIN LATEST_WARRANTY LW
    ON OME.PRODUCT_ID = LW.PRODUCT_ID;

CREATE TABLE SKICAR.SKICAR_SCHEMA.SUPPLY_CHAIN ( 
    product_id VARCHAR, 
    supplier_vendor_name VARCHAR, 
    invoice_number VARCHAR, 
    product_name VARCHAR, 
    order_date DATE, 
    ship_date DATE, 
    delivery_date DATE, 
    delivery_time NUMBER(38, 0), 
    price NUMBER(38, 2), 
    average_shipping_time NUMBER(38, 1), 
    average_product_price NUMBER(38, 2), 
    capacity NUMBER(38, 0), 
    payment_terms VARCHAR, 
    return_rate NUMBER(38, 2), 
    shipping_start_location VARCHAR ); 

CREATE TEMP FILE FORMAT SKICAR.SKICAR_SCHEMA.FORMAT
	TYPE=CSV
    SKIP_HEADER=1
    FIELD_DELIMITER=','
    TRIM_SPACE=TRUE
    FIELD_OPTIONALLY_ENCLOSED_BY='"'
    REPLACE_INVALID_CHARACTERS=TRUE
    DATE_FORMAT=AUTO
    TIME_FORMAT=AUTO
    TIMESTAMP_FORMAT=AUTO; 

-- Ensure you load content into the SKICAR.SKICAR_SCHEMA.SETUP
COPY INTO SKICAR.SKICAR_SCHEMA.SUPPLY_CHAIN 
FROM (SELECT $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15
	FROM '@SKICAR.SKICAR_SCHEMA.SETUP') 
FILES = ('Tire_Supply_Chain.csv') 
FILE_FORMAT = SKICAR.SKICAR_SCHEMA.FORMAT
ON_ERROR=ABORT_STATEMENT;

-- Final setup using ACCOUNTADMIN role
USE ROLE ACCOUNTADMIN;

-- Enable Cross-Region Cortex Inference (AWS Region)
ALTER ACCOUNT SET CORTEX_ENABLED_CROSS_REGION = 'AWS_US';

-- Obtain Programmatic Access Token (PAT) (see https://docs.snowflake.com/LIMITEDACCESS/programmatic-access-tokens)
ALTER USER IF EXISTS D4B 
  ADD PROGRAMMATIC ACCESS TOKEN D4B_TOKEN
  ROLE_RESTRICTION = 'CORTEX_SERVICE_ROLE' 
  DAYS_TO_EXPIRY = 30
  COMMENT = 'Token for D4B demo';

-- Copy and paste your token for use in the Slack API and/or Postman 
-- eyJraW...
--

SHOW PROGRAMMATIC ACCESS TOKENS FOR USER D4B;
